####linux系统中的磁盘管理####

#1.本地存储设备的时别
插上U盘看设备
fdisk -l			##真实存在的设备 （不一定是系统识别的）
cat /proc/partition		##系统时别的设备
blkid				##系统可使用的设备
df				##系统正在挂载的设备


#2.设备的挂载和卸载
1.设备名称
/dev/xdx	##/dev/hd0 /dev/hd1 /dev/sda /dev/sdb  /dev/sda1 /dev/sda2 /dev/sdb1
/dev/sr0	##光驱
/dev/mapper/*	##虚拟设备(用软件模拟出的设备)

2.设备的挂载
mount  设备	挂载点
mount /dev/sdb1	 /mnt			##挂载sdb1到mnt
umount /mnt| /dev/sdb1			##卸载
mount -o ro /dev/sdb1	 /mnt		##只读挂载
mount 					##查看挂载信息
mount -o remount,rw /dev/sdb1 | /mnt	##重新读写挂载


3.解决设备正忙情况
[root@foundation0 ~]# umount /mnt/
umount: /mnt: target is busy.			##有程序在使用此设备
        (In some cases useful info about processes that 
         the device is found by lsof(8) or fuser(1))
解决方法1
fuser -vm /mnt	#查看/mnt谁在用
fuser -kvm /mnt	#查看并结束（开一个shell进入mnt，在另一个shell里结束）
umount /mnt

解决方法2
lsof /mnt
[root@foundation0 ~]# lsof /mnt/
lsof: WARNING: can't stat() fuse.gvfsd-fuse file system /run/user/1000/gvfs
      Output information may be incomplete.
COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
bash    27446 root  cwd    DIR   8,17     4096    2 /mnt

kill -9 27446
umount /mnt


##3.磁盘分区####
1.硬盘0磁道1扇区的512个字节中记录的信息如下

512=446     +              64      +        2
     ^			    ^		    ^	
   mbr(主引导记录)	  mpt(主分区表)	   55aa(硬盘的有效性标实)


硬盘分区标
   64 
1个分区占用16个字节
1块硬盘上最多可以划分4个主分区

dd if=/dev/zero of=/dev/vda bs=446 count=1
恢复：
添加光驱，选择从光驱启动,进入trubleshooting，rescue
chroot /mnt/sysimage
grub2-install /dev/vda
exit * 2

##试验证明只能有4个分区，新加一个硬盘vdb
dd if=/dev/vdb of=/mnt/mbr1 bs=512 count=1
然后新建一个分区
dd if=/dev/vdb of=/mnt/mbr2 bs=512 count=1
hexdump -C /mnt/mbr1


##3.分区步骤###
1.fdisk -l
2.fdisk /dev/vdb
m
a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition	##删除
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition ##新建
   o   create a new empty DOS partition table
   p   print the partition table  ##显示分区信息
   q   quit without saving changes ##退出
   s   create a new empty Sun disklabel
   t   change a partition's system id  ##修改分区id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit	##保存分区标信息到硬盘
   x   extra functionality (experts only)

###建立主分区

Command (m for help): n		##新建
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p		##主分区
Partition number (1-4, default 1): 	##id用默认
First sector (2048-20971519, default 2048):     ##分区起始
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-20971519, default 20971519): +500M ##分区大小
Partition 1 of type Linux and of size 500 MiB is set

Command (m for help): p	##显示信息

Disk /dev/vdb: 10.7 GB, 10737418240 bytes, 20971520 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xb2cb6457

   Device Boot      Start         End      Blocks   Id  System
/dev/vdb1            2048     1026047      512000   83  Linux

Command (m for help): wq


##当系统已经有三个主分区时
Command (m for help): n
Partition type:
   p   primary (3 primary, 0 extended, 1 free)
   e   extended
Select (default e): e		##3个主分区出现要先划分扩展分区
Selected partition 4
First sector (3074048-20971519, default 3074048): 
Using default value 3074048
Last sector, +sectors or +size{K,M,G} (3074048-20971519, default 20971519): 
Using default value 20971519
Partition 4 of type Extended and of size 8.5 GiB is set

Command (m for help): p

Disk /dev/vdb: 10.7 GB, 10737418240 bytes, 20971520 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xb2cb6457

   Device Boot      Start         End      Blocks   Id  System
/dev/vdb1            2048     1026047      512000   83  Linux
/dev/vdb2         1026048     2050047      512000   83  Linux
/dev/vdb3         2050048     3074047      512000   83  Linux
/dev/vdb4         3074048    20971519     8948736    5  Extended	##把所有空间都给E



###4.给设备安装文件系统####

ext3	rhel5及之前的版本	最多支持32TB的文件系统和2t文件，实际2tb文件系统，16G文件
ext4	rhel6			1EB		16TB
xfs	rhel7			18EB		9eb             7G/s	4G/s
								读取速度极限 写入速度极限
#硬件对硬件，软件对软件
mkfs.xfs	 /dev/vdb1	
mount /dev/vdb1	 /mnt	

man 5 fstab
vim /etc/fstab
设备		挂载点	文件系统	挂载参数	是否备份	是否检测
/dev/vdb1	/mnt	xfs		defaults	0		0

mount -a
#fstab比rc.local快，在硬件检测完，内核启动时就会挂载
#演示fstab写错怎么排错

##5.swap分区管理##
#partprobe同步分区表，在设备被使用的时候用（比如某个设备正在挂载）
设备正在使用时需用partprobe同步分区表
1)swap分区建立
划分分区并设定分区标签未82
mkswap	/dev/vdb6
swapon	-a /dev/vdb6	
swapon -s
vim /etc/fstab
/dev/vdb6	swap	swap	defaults	0 0


2)swap分区删除
vim /etc/fstab

swapoff	 /dev/vdb6
swapon -s

###6.配额###
再分一个vdb7为100M，格式化xfs，建立/public，权限改为777
挂载vdb7到/public，权限变化(要先挂设备，再改权限，权限是记录在设备里的)

配额是针对与分区的。因为只有在vdb7中才会受到限制

mount -o usrquota /dev/vdb7	/public
chmod 777 /public
切换到student用户，dd if=/dev/zero of=/public/studentfile bs=1M count=20
								      30
如果多人用这个目录，没人限制他

edquota -u studnet
Disk quotas for user student (uid 1000):             (硬限，最多写多少)
  Filesystem                   blocks       soft       hard     inodes     soft     hard
  /dev/vdb7                         0       (软限，超过警告)   0          0          0        0        0
			    用户在设备上已经存在的数据大小
					（事实）
inodes(文件个数)
##改的时候改硬限

vim /etc/fstab
/dev/vdb7	/public		xfs	defaults,usrquota	0	0

测试
[student@dns-server ~]$ dd if=/dev/zero of=/public/studentfile bs=1M count=200


###7.磁盘加密###
在锁之上放文件系统
luks加密

cryptsetup luksFormat /dev/vdb8
YES
cryptsetup open /dev/vdb8 westos
ll /dev/mapper/westos
mkfs.xfs  /dev/mapper/westos
mount /dev/mapper/westos  /mnt/
touch /mnt/file{1..10}
umount /mnt/
cryptsetup close westos 关闭之后/dev/mapper/westos文件消失
挂载原始设备/dev/vdb8也不行，是luks加密的

cryptsetup open /dev/vdb8 westos
mount /dev/mapper/westos  /mnt/

